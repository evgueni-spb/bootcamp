@startuml
allowmixing

left to right direction



skinparam package {
  BackgroundColor<<LIB>> olive
  BorderColor<<LIB>> olive
}

skinparam artifact {
  BackgroundColor lightgreen
  BorderColor brown
}


interface EISUPaymentStagingService


class EISUPaymentResponseJob {
+doExecute(map,auditor)
-processCheckResponse
}
note "asynchronous" as S
S . EISUPaymentResponseJob

note as PR
Reads file, updates staging table,
 backs up file, reads staging data,
  processes each record in async task
end note

PR .. EISUPaymentResponseJob

EISUPaymentResponseJob o--> EISUReceiveCheckPaymentService
EISUPaymentResponseJob o--> EISUReceiveEFTPaymentService


interface EISUReceiveCheckPaymentService {
+processFile(jobUid)
}

note "Camel producer marker interfaces" as P
P .. EISUReceiveCheckPaymentService
P . EISUReceiveEFTPaymentService

interface EISUReceiveEFTPaymentService {
+processFile(jobUid)
}

EISUReceiveCheckPaymentService ..> EISUPaymentResponseRouteBuilder
EISUReceiveEFTPaymentService ..> EISUPaymentResponseRouteBuilder

package Camel <<LIB>> {
component "SFTP component"
interface RouteBuilder
interface Processor
}


class EISUPaymentResponseRouteBuilder {
+configure()
-processException()
}

note as B
 Builds two routes,
 one for check payments and
  the other for EFT payments
end note
B . EISUPaymentResponseRouteBuilder

EISUPaymentResponseRouteBuilder ..|> RouteBuilder
EISUPaymentResponseRouteBuilder *--> EISUPaymentResponseProcessor
EISUPaymentResponseRouteBuilder o--> "SFTP component"





interface EISUPaymentResponseMapper {

}

class EISUPaymentResponseMapperImpl {
+validateResponseRecord(paymentTransferEntity)
+mapResponseRecord(paymentTransferEntity)
}


EISUPaymentResponseMapperImpl ..|>  EISUPaymentResponseMapper


class EISUPaymentResponseProcessor{
process(exchange)
}

note as PRP
 Reads the file, validates,
 updates staging records with
 responseBatchNo,processingStatus,
 updated,declineReason in the same transaction.
 Creates async tasks to process each record
 in the current response batch
end note

PRP . EISUPaymentResponseProcessor

interface AsyncTaskManager<<BASE>> {
addTaskToQueue(taskInfo, date)
}

EISUPaymentResponseProcessor o--> AsyncTaskManager

class EISUPaymentResponseProcessingAdapter {
+handleTask(taskInfo, auditor)
}

EISUPaymentResponseProcessingAdapter *--> EISUPaymentStagingService

note as PRA
 invokes BASE services to clear
 or decline payment, closes the claim,
 triggers DocGen, etc
end note

PRA . EISUPaymentResponseProcessingAdapter

AsyncTaskManager ..> EISUPaymentResponseProcessingAdapter

EISUPaymentResponseProcessor ..|> Processor



EISUPaymentResponseProcessor *-> EISUPaymentResponseMapperImpl

package BeanIO <<LIB>> {
abstract class BeanIOStreamFactory
interface BeanReader


BeanIOStreamFactory --> "creates" BeanReader
}

artifact "EFT payment response mapping xml file"
artifact "check payment response mapping xml file"


BeanIOStreamFactory *-->  "EFT payment response mapping xml file"
BeanIOStreamFactory *--> "check payment response mapping xml file"


EISUPaymentResponseMapperImpl o--> BeanReader





@enduml