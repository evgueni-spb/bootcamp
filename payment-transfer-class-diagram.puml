@startuml
allowmixing

left to right direction



skinparam package {
  BackgroundColor<<LIB>> olive
  BorderColor<<LIB>> olive
}

skinparam artifact {
  BackgroundColor lightgreen
  BorderColor brown
}



interface EISUPaymentStagingService


class EISUPaymentTransferJob {
+JobResults doExecute(map,auditor)
-fetchCheckPayments(date, batchNumber)
-fetchEFTPayments(date, batchNumber)
}
note "synchronous" as S
S . EISUPaymentTransferJob





interface EISUPaymentTransferService{
+transferCheckPayments(checkPaymentTransferEntities)
+transferEFTPayments(checkPaymentTransferEntities)
}
class EISUPaymentTransferServiceImpl{

}

interface EISUPaymentTransferMapper {
 +validateStagingRecord(paymentTransferEntity)
 +mapStagingRecord(paymentTransferEntity)
}

class EISUCheckPaymentTransferMapperImpl
EISUCheckPaymentTransferMapperImpl ..|>  EISUPaymentTransferMapper
class EISUEFTPaymentTransferMapperImpl
EISUEFTPaymentTransferMapperImpl ..|>  EISUPaymentTransferMapper

EISUPaymentTransferServiceImpl *->  EISUPaymentTransferMapper

EISUPaymentTransferServiceImpl o--> ProducerTemplate


package Camel <<LIB>> {
component "SFTP component"
interface RouteBuilder
interface Processor
interface ProducerTemplate {
+sendBodyAndHeader(endpointUri,body,headerName,headerValue)
}
}



class EISUPaymentTransferRouteHelper {
+processException()
}
EISUCheckPaymentTransferRouteBuilder ..|> RouteBuilder
EISUCheckPaymentTransferRouteBuilder *--> EISUPaymentTransferPostProcessor
EISUCheckPaymentTransferRouteBuilder o--> "SFTP component"

EISUEFTPaymentTransferRouteBuilder *--> EISUPaymentTransferRouteHelper
EISUCheckPaymentTransferRouteBuilder *--> EISUPaymentTransferRouteHelper

EISUEFTPaymentTransferRouteBuilder ..|> RouteBuilder
EISUEFTPaymentTransferRouteBuilder *--> EISUPaymentTransferPostProcessor
EISUEFTPaymentTransferRouteBuilder o--> "SFTP component"

class EISUCheckPaymentTransferRouteBuilder {
+configure()
}

class EISUEFTPaymentTransferRouteBuilder {
+configure()
}

EISUCheckPaymentTransferRouteBuilder --|> EISUPaymentTransferRouteBuilder
EISUEFTPaymentTransferRouteBuilder -|> EISUPaymentTransferRouteBuilder


class EISUPaymentTransferPostProcessor {
+process(exchange)
-updateStagingRecords(batchNumber)
-updatePayments(batchNumber)
}

note as PRA
<b>updateStagingRecords</b> method
is used to update transferStatus and updated date
 <b>updatePayments</b> method invokes BASE service
 to move approved claim payment to issued.

end note

PRA . EISUPaymentTransferPostProcessor

EISUPaymentTransferPostProcessor ..|> Processor
EISUPaymentTransferPostProcessor o--> EISUPaymentStagingService

package BeanIO <<LIB>> {
abstract class StreamFactory
interface BeanWriter


StreamFactory --> "creates" BeanWriter
}
artifact "payment transfer CHECK mapping xml file"
artifact "payment transfer EFT mapping xml file"


EISUCheckPaymentTransferMapperImpl o-> BeanWriter
EISUEFTPaymentTransferMapperImpl o-> BeanWriter
EISUPaymentTransferServiceImpl *--> EISUCheckPaymentTransferRouteBuilder
EISUPaymentTransferServiceImpl *--> EISUEFTPaymentTransferRouteBuilder

StreamFactory *-> "payment transfer CHECK mapping xml file"
StreamFactory *-> "payment transfer EFT mapping xml file"


EISUPaymentTransferJob o-> EISUPaymentStagingService
EISUPaymentTransferJob o--> EISUPaymentTransferService

EISUPaymentTransferServiceImpl --|> EISUPaymentTransferService



@enduml